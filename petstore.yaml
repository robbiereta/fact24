
openapi: 3.0.0
servers:
  - url: 'http://localhost:3000'
info:
  description: >-
    This is a sample server Notastore server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: OpenAPI Notastore
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: nota
    description: Everything about your Notas
  - name: store
    description: Access to Notastore orders
  - name: user
    description: Operations about user
paths:
  /nota:
    post:
      tags:
        - nota
      summary: Add a new nota to the store
      description: ''
      operationId: addNota
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Nota'
            application/json:
              schema:
                $ref: '#/components/schemas/Nota'
        '405':
          description: Invalid input
      security:
        - notastore_auth:
            - 'write:notas'
            - 'read:notas'
      requestBody:
        $ref: '#/components/requestBodies/Nota'
    put:
      tags:
        - nota
      summary: Update an existing nota
      description: ''
      operationId: updateNota
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Nota'
            application/json:
              schema:
                $ref: '#/components/schemas/Nota'
        '400':
          description: Invalid ID supplied
        '404':
          description: Nota not found
        '405':
          description: Validation exception
      security:
        - notastore_auth:
            - 'write:notas'
            - 'read:notas'
      requestBody:
        $ref: '#/components/requestBodies/Nota'
  /nota/findByStatus:
    get:
      tags:
        - nota
      summary: Finds Notas by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findNotasByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: false
          deprecated: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nota'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nota'
        '400':
          description: Invalid status value
      security:
        - notastore_auth:
            - 'read:notas'
  /nota/findByTags:
    get:
      tags:
        - nota
      summary: Finds Notas by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findNotasByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nota'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nota'
        '400':
          description: Invalid tag value
      security:
        - notastore_auth:
            - 'read:notas'
      deprecated: true
  '/nota/{notaId}':
    get:
      tags:
        - nota
      summary: Find nota by ID
      description: Returns a single nota
      operationId: getNotaById
      parameters:
        - name: notaId
          in: path
          description: ID of nota to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Nota'
            application/json:
              schema:
                $ref: '#/components/schemas/Nota'
        '400':
          description: Invalid ID supplied
        '404':
          description: Nota not found
      security:
        - api_key: []
    post:
      tags:
        - nota
      summary: Updates a nota in the store with form data
      description: ''
      operationId: updateNotaWithForm
      parameters:
        - name: notaId
          in: path
          description: ID of nota that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - notastore_auth:
            - 'write:notas'
            - 'read:notas'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the nota
                  type: string
                status:
                  description: Updated status of the nota
                  type: string
    delete:
      tags:
        - nota
      summary: Deletes a nota
      description: ''
      operationId: deleteNota
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: notaId
          in: path
          description: Nota id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid nota value
      security:
        - notastore_auth:
            - 'write:notas'
            - 'read:notas'
  '/nota/{notaId}/uploadImage':
    post:
      tags:
        - nota
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: notaId
          in: path
          description: ID of nota to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - notastore_auth:
            - 'write:notas'
            - 'read:notas'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  description: Additional data to pass to server
                  type: string
                file:
                  description: file to upload
                  type: string
                  format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns nota inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a nota
      description: ''
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the nota
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generate exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of nota that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$'
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            Set-Cookie:
              description: >-
                Cookie authentication key for use with the `api_key`
                apiKey authentication.
              schema:
                type: string
                example: AUTH_KEY=abcde12345; Path=/; HttpOnly
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - api_key: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Nota:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Nota'
        application/xml:
          schema:
            $ref: '#/components/schemas/Nota'
      description: Nota object that needs to be added to the store
      required: true
  securitySchemes:
    notastore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://notastore.swagger.io/api/oauth/dialog'
          scopes:
            'write:notas': modify notas in your account
            'read:notas': read your notas
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      title: Nota Order
      description: An order for a notas from the nota store
      type: object
      properties:
        id:
          type: integer
          format: int64
        notaId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      title: Nota category
      description: A category for a nota
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$'
      xml:
        name: Category
    User:
      title: a User
      description: A User who is purchasing from the nota store
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      title: Nota Tag
      description: A tag for a nota
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Nota:
      title: a Nota
      description: A nota for sale in the nota store
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int642
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: nota status in the store
          deprecated: true
          enum:
            - available
            - pending
            - sold
      xml:
        name: Nota
    ApiResponse:
      title: An uploaded response
      description: Describes the result of uploading an image resource
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
